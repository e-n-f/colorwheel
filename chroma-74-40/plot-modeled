#!/usr/bin/perl

use POSIX;

$pi = 4 * atan2(1, 1);
$light = 32;
$sides = 8;

@ang = (0, $pi * 1/4, $pi * 2/4, $pi * 3/4, $pi * 4/4, $pi * 5/4, $pi * 6/4, $pi * 7/4);

$sc = .5;

@d = ( "x", "x", "x", "x", "x", "x", "x", "x" );

sub scale {
	my ($x, $y) = @_;

	return sprintf("%.3f %.3f", $x * 612, $y * 612);
}

sub labtoxyz {
	my ($L, $a, $b) = @_;

	my $y = ($L + 16.0) / 116.0;
	my $y3 = POSIX::pow($y, 3.0);
	my $x = ($a / 500.0) + $y;
	my $x3 = POSIX::pow($x, 3.0);
	my $z = $y - ($b / 200.0);
	my $z3 = POSIX::pow($z, 3.0);

	if ($y3 > 0.008856) {
		$y = $y3;
	} else {
		$y = ($y - (16.0 / 116.0)) / 7.787;
	}
	if ($x3 > 0.008856) {
		$x = $x3;
	} else {
		$x = ($x - (16.0 / 116.0)) / 7.787;
	}
	if ($z3 > 0.008856) {
		$z = $z3;
	} else {
		$z = ($z - (16.0 / 116.0)) / 7.787;
	}

	my @whitepoint = ( 95.17497923187392, 100, 102.45906488893944 );

	return ( $x * $whitepoint[0], $y * $whitepoint[1], $z * $whitepoint[2] );
}

sub xyztoxyy {
	my ($X, $Y, $Z) = @_;

	$X /= 100;
	$Y /= 100;
	$Z /= 100;

	my $x = $X / ($X + $Y + $Z);
	my $y = $Y / ($X + $Y + $Z);

	return ( $x, $y, $Y );
}

sub bezier {
	my ($x0, $y0, $x1, $y1, $x2, $y2, $x3, $y3) = @_;

	if ($x0 == 0) {
		$x0 = $x1;
		$y0 = $y1;
	}
	if ($x3 == 0) {
		$x3 = $x2;
		$y3 = $y2;
	}

	# http://www.antigrain.com/research/bezier_interpolation/
	my $xc1 = ($x0 + $x1) / 2.0;
	my $yc1 = ($y0 + $y1) / 2.0;
	my $xc2 = ($x1 + $x2) / 2.0;
	my $yc2 = ($y1 + $y2) / 2.0;
	my $xc3 = ($x2 + $x3) / 2.0;
	my $yc3 = ($y2 + $y3) / 2.0;

	my $len1 = sqrt(($x1-$x0) * ($x1-$x0) + ($y1-$y0) * ($y1-$y0));
	my $len2 = sqrt(($x2-$x1) * ($x2-$x1) + ($y2-$y1) * ($y2-$y1));
	my $len3 = sqrt(($x3-$x2) * ($x3-$x2) + ($y3-$y2) * ($y3-$y2));

	if ($len1 + $len2 == 0 || $len2 + $len3 == 0) {
		print STDERR "??? $x0,$y0 $x1,$y1 $x2,$y2 $x3,$y3\n";
		return;
	}

	my $k1 = $len1 / ($len1 + $len2);
	my $k2 = $len2 / ($len2 + $len3);

	my $xm1 = $xc1 + ($xc2 - $xc1) * $k1;
	my $ym1 = $yc1 + ($yc2 - $yc1) * $k1;

	my $xm2 = $xc2 + ($xc3 - $xc2) * $k2;
	my $ym2 = $yc2 + ($yc3 - $yc2) * $k2;

	my $smooth_value = .5;

	my $ctrl1_x = $xm1 + ($xc2 - $xm1) * $smooth_value + $x1 - $xm1;
	my $ctrl1_y = $ym1 + ($yc2 - $ym1) * $smooth_value + $y1 - $ym1;

	my $ctrl2_x = $xm2 + ($xc2 - $xm2) * $smooth_value + $x2 - $xm2;
	my $ctrl2_y = $ym2 + ($yc2 - $ym2) * $smooth_value + $y2 - $ym2;

	print scale($x1, $y1) . " moveto ";
	print scale ($ctrl1_x, $ctrl1_y) . " " . scale($ctrl2_x, $ctrl2_y) . " ";
	print scale($x2, $y2) . " curveto stroke\n";
}

for ($b = -100; $b < 120; $b += ($maxv - $minv) * .75) {
	$maxv = 0;
	$minv = 0;
	$row++;

	@prev = sort { $a <=> $b } @prev;
	$inc = @prev[$#prev / 2] * .55;
	@prev = ();

	for ($a = -100 - $inc * ($row % 2); $a < 130; $a += ($maxp - $minp) * 1.1) {
		push @prev, $maxp - $minp;

		$maxp = 0;
		$minp = 0;

		$d[0] = 0.0887709 * exp(log(abs($b - -4.62901)) * 1.31804) + 33.4134 + $a * 0.0438652 + $light * -0.0261684;
		$d[1] = 0.338523  * exp(log(abs($b - -6.51298)) * 0.899516) + 13.7883 + $a * 0.0140915 + $light * -0.0395568;
		$d[2] = 0.267402  * exp(log(abs($b - -3.4832 )) * 0.920758) + 11.151  + $a * 0.0286005 + $light * -0.0128333;
		$d[3] = 0.000823594 * exp(log(abs($b - 1.73547)) * 2.35657) + 15.3928 + $a * 0.0362825 + $light * 0.0255425;
		$d[4] = 3.41911e-05 * exp(log(abs($b - -38.5669)) * 2.85155) + 23.0261 + $a * 0.183335 + $light * 0.0918633;
		$d[5] = 0.0588127 * exp(log(abs($b - -16.4236)) * 1.33919) + 14.6223 + $a * -0.0118162 + $light * -0.0798752;
		$d[6] = 0.111331  * exp(log(abs($b - -10.0303)) * 1.18863) + 12.7134 + $a * -0.0178874 + $light * -0.0715321;
		$d[7] = 0.229502  * exp(log(abs($b - -5.17881)) * 1.11492) + 17.7111 + $a * -0.0347892 + $light * -0.118122;

		for ($i = 0; $i < $sides; $i++) {
			$d0 = $d[($i - 1 + $sides) % $sides];
			$d1 = $d[$i];
			$d2 = $d[($i + 1) % $sides];
			$d3 = $d[($i + 2) % $sides];

			$a0 = $ang[($i - 1 + $sides) % $sides];
			$a1 = $ang[$i];
			$a2 = $ang[($i + 1) % $sides];
			$a3 = $ang[($i + 2) % $sides];

			if ($d1 * cos($a1) * $sc > $maxp) {
				$maxp = $d1 * cos($a1) * $sc;
			}
			if ($d1 * cos($a1) * $sc < $minp) {
				$minp = $d1 * cos($a1) * $sc;
			}

			if ($d1 * sin($a1) * $sc > $maxv) {
				$maxv = $d1 * sin($a1) * $sc;
			}
			if ($d1 * sin($a1) * $sc < $minv) {
				$minv = $d1 * sin($a1) * $sc;
			}

			if ($d1 ne "x" && $d2 ne "x") {
				$x0 = ($a + $d0 * cos($a0) * $sc);
				$y0 = ($b + $d0 * sin($a0) * $sc);

				$x1 = ($a + $d1 * cos($a1) * $sc);
				$y1 = ($b + $d1 * sin($a1) * $sc);

				$x2 = ($a + $d2 * cos($a2) * $sc);
				$y2 = ($b + $d2 * sin($a2) * $sc);

				$x3 = ($a + $d3 * cos($a3) * $sc);
				$y3 = ($b + $d3 * sin($a3) * $sc);

				($x0, $y0, $z0) = labtoxyz($light,  $x0, $y0);
				($x0, $y0, $Y0) = xyztoxyy($x0, $y0, $z0);
				($x1, $y1, $z1) = labtoxyz($light,  $x1, $y1);
				($x1, $y1, $Y1) = xyztoxyy($x1, $y1, $z1);
				($x2, $y2, $z2) = labtoxyz($light,  $x2, $y2);
				($x2, $y2, $Y2) = xyztoxyy($x2, $y2, $z2);
				($x3, $y3, $z3) = labtoxyz($light,  $x3, $y3);
				($x3, $y3, $Y3) = xyztoxyy($x3, $y3, $z3);

				bezier($x0, $y0, $x1, $y1, $x2, $y2, $x3, $y3);
			}

			$xc = $a;
			$yc = $b;

			($xc, $yc, $zc) = labtoxyz($light, $xc, $yc);
			($x, $y, $Y) = xyztoxyy($xc, $yc, $zc);

			print scale($x, $y) . " 1 0 360 arc fill\n";
		}
	}
}
